// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.21.12
// source: kubemanager.proto

package kubemanager

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateClusterRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TenantId      string                 `protobuf:"bytes,1,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Region        string                 `protobuf:"bytes,3,opt,name=region,proto3" json:"region,omitempty"`
	K8SVersion    string                 `protobuf:"bytes,4,opt,name=k8s_version,json=k8sVersion,proto3" json:"k8s_version,omitempty"`
	NodeCount     int32                  `protobuf:"varint,5,opt,name=node_count,json=nodeCount,proto3" json:"node_count,omitempty"`
	Provider      string                 `protobuf:"bytes,6,opt,name=provider,proto3" json:"provider,omitempty"` // ex: "bare-metal", "aws", "gcp"
	Tags          map[string]string      `protobuf:"bytes,7,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateClusterRequest) Reset() {
	*x = CreateClusterRequest{}
	mi := &file_kubemanager_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateClusterRequest) ProtoMessage() {}

func (x *CreateClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kubemanager_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateClusterRequest.ProtoReflect.Descriptor instead.
func (*CreateClusterRequest) Descriptor() ([]byte, []int) {
	return file_kubemanager_proto_rawDescGZIP(), []int{0}
}

func (x *CreateClusterRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *CreateClusterRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateClusterRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *CreateClusterRequest) GetK8SVersion() string {
	if x != nil {
		return x.K8SVersion
	}
	return ""
}

func (x *CreateClusterRequest) GetNodeCount() int32 {
	if x != nil {
		return x.NodeCount
	}
	return 0
}

func (x *CreateClusterRequest) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *CreateClusterRequest) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type ClusterIDRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ClusterId     string                 `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClusterIDRequest) Reset() {
	*x = ClusterIDRequest{}
	mi := &file_kubemanager_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClusterIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterIDRequest) ProtoMessage() {}

func (x *ClusterIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kubemanager_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterIDRequest.ProtoReflect.Descriptor instead.
func (*ClusterIDRequest) Descriptor() ([]byte, []int) {
	return file_kubemanager_proto_rawDescGZIP(), []int{1}
}

func (x *ClusterIDRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

type ScaleClusterRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	ClusterId       string                 `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	AdditionalNodes int32                  `protobuf:"varint,2,opt,name=additional_nodes,json=additionalNodes,proto3" json:"additional_nodes,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ScaleClusterRequest) Reset() {
	*x = ScaleClusterRequest{}
	mi := &file_kubemanager_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScaleClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScaleClusterRequest) ProtoMessage() {}

func (x *ScaleClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kubemanager_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScaleClusterRequest.ProtoReflect.Descriptor instead.
func (*ScaleClusterRequest) Descriptor() ([]byte, []int) {
	return file_kubemanager_proto_rawDescGZIP(), []int{2}
}

func (x *ScaleClusterRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *ScaleClusterRequest) GetAdditionalNodes() int32 {
	if x != nil {
		return x.AdditionalNodes
	}
	return 0
}

type DeployAppRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ClusterId     string                 `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	ChartName     string                 `protobuf:"bytes,2,opt,name=chart_name,json=chartName,proto3" json:"chart_name,omitempty"`
	Namespace     string                 `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Values        map[string]string      `protobuf:"bytes,4,rep,name=values,proto3" json:"values,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // valeurs du chart
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeployAppRequest) Reset() {
	*x = DeployAppRequest{}
	mi := &file_kubemanager_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeployAppRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeployAppRequest) ProtoMessage() {}

func (x *DeployAppRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kubemanager_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeployAppRequest.ProtoReflect.Descriptor instead.
func (*DeployAppRequest) Descriptor() ([]byte, []int) {
	return file_kubemanager_proto_rawDescGZIP(), []int{3}
}

func (x *DeployAppRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *DeployAppRequest) GetChartName() string {
	if x != nil {
		return x.ChartName
	}
	return ""
}

func (x *DeployAppRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *DeployAppRequest) GetValues() map[string]string {
	if x != nil {
		return x.Values
	}
	return nil
}

type RestartComponentRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ClusterId     string                 `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	Component     string                 `protobuf:"bytes,2,opt,name=component,proto3" json:"component,omitempty"` // ex: "kubelet", "dns", "scheduler"
	NodeId        string                 `protobuf:"bytes,3,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RestartComponentRequest) Reset() {
	*x = RestartComponentRequest{}
	mi := &file_kubemanager_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RestartComponentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestartComponentRequest) ProtoMessage() {}

func (x *RestartComponentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kubemanager_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestartComponentRequest.ProtoReflect.Descriptor instead.
func (*RestartComponentRequest) Descriptor() ([]byte, []int) {
	return file_kubemanager_proto_rawDescGZIP(), []int{4}
}

func (x *RestartComponentRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *RestartComponentRequest) GetComponent() string {
	if x != nil {
		return x.Component
	}
	return ""
}

func (x *RestartComponentRequest) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

type Cluster struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	TenantId      string                 `protobuf:"bytes,2,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	Name          string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Region        string                 `protobuf:"bytes,4,opt,name=region,proto3" json:"region,omitempty"`
	Status        string                 `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	Provider      string                 `protobuf:"bytes,6,opt,name=provider,proto3" json:"provider,omitempty"`
	K8SVersion    string                 `protobuf:"bytes,7,opt,name=k8s_version,json=k8sVersion,proto3" json:"k8s_version,omitempty"`
	NodeCount     int32                  `protobuf:"varint,8,opt,name=node_count,json=nodeCount,proto3" json:"node_count,omitempty"`
	CreatedAt     string                 `protobuf:"bytes,9,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt     string                 `protobuf:"bytes,10,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Tags          map[string]string      `protobuf:"bytes,11,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Cluster) Reset() {
	*x = Cluster{}
	mi := &file_kubemanager_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Cluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cluster) ProtoMessage() {}

func (x *Cluster) ProtoReflect() protoreflect.Message {
	mi := &file_kubemanager_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cluster.ProtoReflect.Descriptor instead.
func (*Cluster) Descriptor() ([]byte, []int) {
	return file_kubemanager_proto_rawDescGZIP(), []int{5}
}

func (x *Cluster) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Cluster) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *Cluster) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Cluster) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *Cluster) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Cluster) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *Cluster) GetK8SVersion() string {
	if x != nil {
		return x.K8SVersion
	}
	return ""
}

func (x *Cluster) GetNodeCount() int32 {
	if x != nil {
		return x.NodeCount
	}
	return 0
}

func (x *Cluster) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *Cluster) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *Cluster) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type ClusterStatusResponse struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	ClusterId        string                 `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	Status           string                 `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"` // ex: provisioning, healthy, degraded, failed
	NodeCount        int32                  `protobuf:"varint,3,opt,name=node_count,json=nodeCount,proto3" json:"node_count,omitempty"`
	ComponentsStatus map[string]string      `protobuf:"bytes,4,rep,name=components_status,json=componentsStatus,proto3" json:"components_status,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	LastCheck        string                 `protobuf:"bytes,5,opt,name=last_check,json=lastCheck,proto3" json:"last_check,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ClusterStatusResponse) Reset() {
	*x = ClusterStatusResponse{}
	mi := &file_kubemanager_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClusterStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterStatusResponse) ProtoMessage() {}

func (x *ClusterStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kubemanager_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterStatusResponse.ProtoReflect.Descriptor instead.
func (*ClusterStatusResponse) Descriptor() ([]byte, []int) {
	return file_kubemanager_proto_rawDescGZIP(), []int{6}
}

func (x *ClusterStatusResponse) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *ClusterStatusResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ClusterStatusResponse) GetNodeCount() int32 {
	if x != nil {
		return x.NodeCount
	}
	return 0
}

func (x *ClusterStatusResponse) GetComponentsStatus() map[string]string {
	if x != nil {
		return x.ComponentsStatus
	}
	return nil
}

func (x *ClusterStatusResponse) GetLastCheck() string {
	if x != nil {
		return x.LastCheck
	}
	return ""
}

type ClusterListResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Clusters      []*Cluster             `protobuf:"bytes,1,rep,name=clusters,proto3" json:"clusters,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClusterListResponse) Reset() {
	*x = ClusterListResponse{}
	mi := &file_kubemanager_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClusterListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterListResponse) ProtoMessage() {}

func (x *ClusterListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kubemanager_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterListResponse.ProtoReflect.Descriptor instead.
func (*ClusterListResponse) Descriptor() ([]byte, []int) {
	return file_kubemanager_proto_rawDescGZIP(), []int{7}
}

func (x *ClusterListResponse) GetClusters() []*Cluster {
	if x != nil {
		return x.Clusters
	}
	return nil
}

type ClusterLogResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ClusterId     string                 `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	Logs          []string               `protobuf:"bytes,2,rep,name=logs,proto3" json:"logs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClusterLogResponse) Reset() {
	*x = ClusterLogResponse{}
	mi := &file_kubemanager_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClusterLogResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterLogResponse) ProtoMessage() {}

func (x *ClusterLogResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kubemanager_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterLogResponse.ProtoReflect.Descriptor instead.
func (*ClusterLogResponse) Descriptor() ([]byte, []int) {
	return file_kubemanager_proto_rawDescGZIP(), []int{8}
}

func (x *ClusterLogResponse) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *ClusterLogResponse) GetLogs() []string {
	if x != nil {
		return x.Logs
	}
	return nil
}

type TenantRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TenantId      string                 `protobuf:"bytes,1,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TenantRequest) Reset() {
	*x = TenantRequest{}
	mi := &file_kubemanager_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TenantRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TenantRequest) ProtoMessage() {}

func (x *TenantRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kubemanager_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TenantRequest.ProtoReflect.Descriptor instead.
func (*TenantRequest) Descriptor() ([]byte, []int) {
	return file_kubemanager_proto_rawDescGZIP(), []int{9}
}

func (x *TenantRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

type OperationResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	OperationId   string                 `protobuf:"bytes,2,opt,name=operation_id,json=operationId,proto3" json:"operation_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OperationResponse) Reset() {
	*x = OperationResponse{}
	mi := &file_kubemanager_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OperationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationResponse) ProtoMessage() {}

func (x *OperationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kubemanager_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationResponse.ProtoReflect.Descriptor instead.
func (*OperationResponse) Descriptor() ([]byte, []int) {
	return file_kubemanager_proto_rawDescGZIP(), []int{10}
}

func (x *OperationResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *OperationResponse) GetOperationId() string {
	if x != nil {
		return x.OperationId
	}
	return ""
}

type ClusterConfigResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ClusterId     string                 `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	Kubeconfig    string                 `protobuf:"bytes,2,opt,name=kubeconfig,proto3" json:"kubeconfig,omitempty"`
	AppConfigs    map[string]string      `protobuf:"bytes,3,rep,name=app_configs,json=appConfigs,proto3" json:"app_configs,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClusterConfigResponse) Reset() {
	*x = ClusterConfigResponse{}
	mi := &file_kubemanager_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClusterConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterConfigResponse) ProtoMessage() {}

func (x *ClusterConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kubemanager_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterConfigResponse.ProtoReflect.Descriptor instead.
func (*ClusterConfigResponse) Descriptor() ([]byte, []int) {
	return file_kubemanager_proto_rawDescGZIP(), []int{11}
}

func (x *ClusterConfigResponse) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *ClusterConfigResponse) GetKubeconfig() string {
	if x != nil {
		return x.Kubeconfig
	}
	return ""
}

func (x *ClusterConfigResponse) GetAppConfigs() map[string]string {
	if x != nil {
		return x.AppConfigs
	}
	return nil
}

type ApplyClusterConfigRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ClusterId     string                 `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	KubeadmConfig string                 `protobuf:"bytes,2,opt,name=kubeadm_config,json=kubeadmConfig,proto3" json:"kubeadm_config,omitempty"`
	AppConfigs    map[string]string      `protobuf:"bytes,3,rep,name=app_configs,json=appConfigs,proto3" json:"app_configs,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ApplyClusterConfigRequest) Reset() {
	*x = ApplyClusterConfigRequest{}
	mi := &file_kubemanager_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApplyClusterConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyClusterConfigRequest) ProtoMessage() {}

func (x *ApplyClusterConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kubemanager_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyClusterConfigRequest.ProtoReflect.Descriptor instead.
func (*ApplyClusterConfigRequest) Descriptor() ([]byte, []int) {
	return file_kubemanager_proto_rawDescGZIP(), []int{12}
}

func (x *ApplyClusterConfigRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *ApplyClusterConfigRequest) GetKubeadmConfig() string {
	if x != nil {
		return x.KubeadmConfig
	}
	return ""
}

func (x *ApplyClusterConfigRequest) GetAppConfigs() map[string]string {
	if x != nil {
		return x.AppConfigs
	}
	return nil
}

type ClusterOperationsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Operations    []*ClusterOperation    `protobuf:"bytes,1,rep,name=operations,proto3" json:"operations,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClusterOperationsResponse) Reset() {
	*x = ClusterOperationsResponse{}
	mi := &file_kubemanager_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClusterOperationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterOperationsResponse) ProtoMessage() {}

func (x *ClusterOperationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kubemanager_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterOperationsResponse.ProtoReflect.Descriptor instead.
func (*ClusterOperationsResponse) Descriptor() ([]byte, []int) {
	return file_kubemanager_proto_rawDescGZIP(), []int{13}
}

func (x *ClusterOperationsResponse) GetOperations() []*ClusterOperation {
	if x != nil {
		return x.Operations
	}
	return nil
}

type ClusterOperation struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type          string                 `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`     // create, scale, delete, deploy, etc.
	Status        string                 `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"` // pending, success, failed
	StartedAt     string                 `protobuf:"bytes,4,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"`
	EndedAt       string                 `protobuf:"bytes,5,opt,name=ended_at,json=endedAt,proto3" json:"ended_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClusterOperation) Reset() {
	*x = ClusterOperation{}
	mi := &file_kubemanager_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClusterOperation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterOperation) ProtoMessage() {}

func (x *ClusterOperation) ProtoReflect() protoreflect.Message {
	mi := &file_kubemanager_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterOperation.ProtoReflect.Descriptor instead.
func (*ClusterOperation) Descriptor() ([]byte, []int) {
	return file_kubemanager_proto_rawDescGZIP(), []int{14}
}

func (x *ClusterOperation) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ClusterOperation) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ClusterOperation) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ClusterOperation) GetStartedAt() string {
	if x != nil {
		return x.StartedAt
	}
	return ""
}

func (x *ClusterOperation) GetEndedAt() string {
	if x != nil {
		return x.EndedAt
	}
	return ""
}

type AddClusterUserRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ClusterId     string                 `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	UserId        string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Role          string                 `protobuf:"bytes,3,opt,name=role,proto3" json:"role,omitempty"` // ex: admin, viewer
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddClusterUserRequest) Reset() {
	*x = AddClusterUserRequest{}
	mi := &file_kubemanager_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddClusterUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddClusterUserRequest) ProtoMessage() {}

func (x *AddClusterUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kubemanager_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddClusterUserRequest.ProtoReflect.Descriptor instead.
func (*AddClusterUserRequest) Descriptor() ([]byte, []int) {
	return file_kubemanager_proto_rawDescGZIP(), []int{15}
}

func (x *AddClusterUserRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *AddClusterUserRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *AddClusterUserRequest) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

type ClusterUsersResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Users         []*ClusterUser         `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClusterUsersResponse) Reset() {
	*x = ClusterUsersResponse{}
	mi := &file_kubemanager_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClusterUsersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterUsersResponse) ProtoMessage() {}

func (x *ClusterUsersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kubemanager_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterUsersResponse.ProtoReflect.Descriptor instead.
func (*ClusterUsersResponse) Descriptor() ([]byte, []int) {
	return file_kubemanager_proto_rawDescGZIP(), []int{16}
}

func (x *ClusterUsersResponse) GetUsers() []*ClusterUser {
	if x != nil {
		return x.Users
	}
	return nil
}

type ClusterUser struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Role          string                 `protobuf:"bytes,2,opt,name=role,proto3" json:"role,omitempty"`
	AddedAt       string                 `protobuf:"bytes,3,opt,name=added_at,json=addedAt,proto3" json:"added_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClusterUser) Reset() {
	*x = ClusterUser{}
	mi := &file_kubemanager_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClusterUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterUser) ProtoMessage() {}

func (x *ClusterUser) ProtoReflect() protoreflect.Message {
	mi := &file_kubemanager_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterUser.ProtoReflect.Descriptor instead.
func (*ClusterUser) Descriptor() ([]byte, []int) {
	return file_kubemanager_proto_rawDescGZIP(), []int{17}
}

func (x *ClusterUser) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ClusterUser) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

func (x *ClusterUser) GetAddedAt() string {
	if x != nil {
		return x.AddedAt
	}
	return ""
}

type UpgradeClusterRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ClusterId     string                 `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	NewK8SVersion string                 `protobuf:"bytes,2,opt,name=new_k8s_version,json=newK8sVersion,proto3" json:"new_k8s_version,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpgradeClusterRequest) Reset() {
	*x = UpgradeClusterRequest{}
	mi := &file_kubemanager_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpgradeClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradeClusterRequest) ProtoMessage() {}

func (x *UpgradeClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kubemanager_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradeClusterRequest.ProtoReflect.Descriptor instead.
func (*UpgradeClusterRequest) Descriptor() ([]byte, []int) {
	return file_kubemanager_proto_rawDescGZIP(), []int{18}
}

func (x *UpgradeClusterRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *UpgradeClusterRequest) GetNewK8SVersion() string {
	if x != nil {
		return x.NewK8SVersion
	}
	return ""
}

type NodeHealthRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ClusterId     string                 `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	NodeId        string                 `protobuf:"bytes,2,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NodeHealthRequest) Reset() {
	*x = NodeHealthRequest{}
	mi := &file_kubemanager_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NodeHealthRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeHealthRequest) ProtoMessage() {}

func (x *NodeHealthRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kubemanager_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeHealthRequest.ProtoReflect.Descriptor instead.
func (*NodeHealthRequest) Descriptor() ([]byte, []int) {
	return file_kubemanager_proto_rawDescGZIP(), []int{19}
}

func (x *NodeHealthRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *NodeHealthRequest) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

type NodeHealthResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        string                 `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Metrics       map[string]string      `protobuf:"bytes,2,rep,name=metrics,proto3" json:"metrics,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NodeHealthResponse) Reset() {
	*x = NodeHealthResponse{}
	mi := &file_kubemanager_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NodeHealthResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeHealthResponse) ProtoMessage() {}

func (x *NodeHealthResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kubemanager_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeHealthResponse.ProtoReflect.Descriptor instead.
func (*NodeHealthResponse) Descriptor() ([]byte, []int) {
	return file_kubemanager_proto_rawDescGZIP(), []int{20}
}

func (x *NodeHealthResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *NodeHealthResponse) GetMetrics() map[string]string {
	if x != nil {
		return x.Metrics
	}
	return nil
}

var File_kubemanager_proto protoreflect.FileDescriptor

const file_kubemanager_proto_rawDesc = "" +
	"\n" +
	"\x11kubemanager.proto\x12\vkubemanager\x1a\x1cgoogle/api/annotations.proto\"\xb5\x02\n" +
	"\x14CreateClusterRequest\x12\x1b\n" +
	"\ttenant_id\x18\x01 \x01(\tR\btenantId\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x16\n" +
	"\x06region\x18\x03 \x01(\tR\x06region\x12\x1f\n" +
	"\vk8s_version\x18\x04 \x01(\tR\n" +
	"k8sVersion\x12\x1d\n" +
	"\n" +
	"node_count\x18\x05 \x01(\x05R\tnodeCount\x12\x1a\n" +
	"\bprovider\x18\x06 \x01(\tR\bprovider\x12?\n" +
	"\x04tags\x18\a \x03(\v2+.kubemanager.CreateClusterRequest.TagsEntryR\x04tags\x1a7\n" +
	"\tTagsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"1\n" +
	"\x10ClusterIDRequest\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tR\tclusterId\"_\n" +
	"\x13ScaleClusterRequest\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tR\tclusterId\x12)\n" +
	"\x10additional_nodes\x18\x02 \x01(\x05R\x0fadditionalNodes\"\xec\x01\n" +
	"\x10DeployAppRequest\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tR\tclusterId\x12\x1d\n" +
	"\n" +
	"chart_name\x18\x02 \x01(\tR\tchartName\x12\x1c\n" +
	"\tnamespace\x18\x03 \x01(\tR\tnamespace\x12A\n" +
	"\x06values\x18\x04 \x03(\v2).kubemanager.DeployAppRequest.ValuesEntryR\x06values\x1a9\n" +
	"\vValuesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"o\n" +
	"\x17RestartComponentRequest\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tR\tclusterId\x12\x1c\n" +
	"\tcomponent\x18\x02 \x01(\tR\tcomponent\x12\x17\n" +
	"\anode_id\x18\x03 \x01(\tR\x06nodeId\"\x81\x03\n" +
	"\aCluster\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x1b\n" +
	"\ttenant_id\x18\x02 \x01(\tR\btenantId\x12\x12\n" +
	"\x04name\x18\x03 \x01(\tR\x04name\x12\x16\n" +
	"\x06region\x18\x04 \x01(\tR\x06region\x12\x16\n" +
	"\x06status\x18\x05 \x01(\tR\x06status\x12\x1a\n" +
	"\bprovider\x18\x06 \x01(\tR\bprovider\x12\x1f\n" +
	"\vk8s_version\x18\a \x01(\tR\n" +
	"k8sVersion\x12\x1d\n" +
	"\n" +
	"node_count\x18\b \x01(\x05R\tnodeCount\x12\x1d\n" +
	"\n" +
	"created_at\x18\t \x01(\tR\tcreatedAt\x12\x1d\n" +
	"\n" +
	"updated_at\x18\n" +
	" \x01(\tR\tupdatedAt\x122\n" +
	"\x04tags\x18\v \x03(\v2\x1e.kubemanager.Cluster.TagsEntryR\x04tags\x1a7\n" +
	"\tTagsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xb8\x02\n" +
	"\x15ClusterStatusResponse\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tR\tclusterId\x12\x16\n" +
	"\x06status\x18\x02 \x01(\tR\x06status\x12\x1d\n" +
	"\n" +
	"node_count\x18\x03 \x01(\x05R\tnodeCount\x12e\n" +
	"\x11components_status\x18\x04 \x03(\v28.kubemanager.ClusterStatusResponse.ComponentsStatusEntryR\x10componentsStatus\x12\x1d\n" +
	"\n" +
	"last_check\x18\x05 \x01(\tR\tlastCheck\x1aC\n" +
	"\x15ComponentsStatusEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"G\n" +
	"\x13ClusterListResponse\x120\n" +
	"\bclusters\x18\x01 \x03(\v2\x14.kubemanager.ClusterR\bclusters\"G\n" +
	"\x12ClusterLogResponse\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tR\tclusterId\x12\x12\n" +
	"\x04logs\x18\x02 \x03(\tR\x04logs\",\n" +
	"\rTenantRequest\x12\x1b\n" +
	"\ttenant_id\x18\x01 \x01(\tR\btenantId\"P\n" +
	"\x11OperationResponse\x12\x18\n" +
	"\amessage\x18\x01 \x01(\tR\amessage\x12!\n" +
	"\foperation_id\x18\x02 \x01(\tR\voperationId\"\xea\x01\n" +
	"\x15ClusterConfigResponse\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tR\tclusterId\x12\x1e\n" +
	"\n" +
	"kubeconfig\x18\x02 \x01(\tR\n" +
	"kubeconfig\x12S\n" +
	"\vapp_configs\x18\x03 \x03(\v22.kubemanager.ClusterConfigResponse.AppConfigsEntryR\n" +
	"appConfigs\x1a=\n" +
	"\x0fAppConfigsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xf9\x01\n" +
	"\x19ApplyClusterConfigRequest\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tR\tclusterId\x12%\n" +
	"\x0ekubeadm_config\x18\x02 \x01(\tR\rkubeadmConfig\x12W\n" +
	"\vapp_configs\x18\x03 \x03(\v26.kubemanager.ApplyClusterConfigRequest.AppConfigsEntryR\n" +
	"appConfigs\x1a=\n" +
	"\x0fAppConfigsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"Z\n" +
	"\x19ClusterOperationsResponse\x12=\n" +
	"\n" +
	"operations\x18\x01 \x03(\v2\x1d.kubemanager.ClusterOperationR\n" +
	"operations\"\x88\x01\n" +
	"\x10ClusterOperation\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04type\x18\x02 \x01(\tR\x04type\x12\x16\n" +
	"\x06status\x18\x03 \x01(\tR\x06status\x12\x1d\n" +
	"\n" +
	"started_at\x18\x04 \x01(\tR\tstartedAt\x12\x19\n" +
	"\bended_at\x18\x05 \x01(\tR\aendedAt\"c\n" +
	"\x15AddClusterUserRequest\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tR\tclusterId\x12\x17\n" +
	"\auser_id\x18\x02 \x01(\tR\x06userId\x12\x12\n" +
	"\x04role\x18\x03 \x01(\tR\x04role\"F\n" +
	"\x14ClusterUsersResponse\x12.\n" +
	"\x05users\x18\x01 \x03(\v2\x18.kubemanager.ClusterUserR\x05users\"U\n" +
	"\vClusterUser\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\x12\x12\n" +
	"\x04role\x18\x02 \x01(\tR\x04role\x12\x19\n" +
	"\badded_at\x18\x03 \x01(\tR\aaddedAt\"^\n" +
	"\x15UpgradeClusterRequest\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tR\tclusterId\x12&\n" +
	"\x0fnew_k8s_version\x18\x02 \x01(\tR\rnewK8sVersion\"K\n" +
	"\x11NodeHealthRequest\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tR\tclusterId\x12\x17\n" +
	"\anode_id\x18\x02 \x01(\tR\x06nodeId\"\xb0\x01\n" +
	"\x12NodeHealthResponse\x12\x16\n" +
	"\x06status\x18\x01 \x01(\tR\x06status\x12F\n" +
	"\ametrics\x18\x02 \x03(\v2,.kubemanager.NodeHealthResponse.MetricsEntryR\ametrics\x1a:\n" +
	"\fMetricsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x012\x8c\x0f\n" +
	"\x12KubeManagerService\x12k\n" +
	"\rCreateCluster\x12!.kubemanager.CreateClusterRequest\x1a\x1e.kubemanager.OperationResponse\"\x17\x82\xd3\xe4\x93\x02\x11:\x01*\"\f/v1/clusters\x12u\n" +
	"\tDeployApp\x12\x1d.kubemanager.DeployAppRequest\x1a\x1e.kubemanager.OperationResponse\")\x82\xd3\xe4\x93\x02#:\x01*\"\x1e/v1/clusters/{cluster_id}/apps\x12|\n" +
	"\fScaleCluster\x12 .kubemanager.ScaleClusterRequest\x1a\x1e.kubemanager.OperationResponse\"*\x82\xd3\xe4\x93\x02$:\x01*\"\x1f/v1/clusters/{cluster_id}/scale\x12q\n" +
	"\rDeleteCluster\x12\x1d.kubemanager.ClusterIDRequest\x1a\x1e.kubemanager.OperationResponse\"!\x82\xd3\xe4\x93\x02\x1b*\x19/v1/clusters/{cluster_id}\x12\x7f\n" +
	"\x10GetClusterStatus\x12\x1d.kubemanager.ClusterIDRequest\x1a\".kubemanager.ClusterStatusResponse\"(\x82\xd3\xe4\x93\x02\"\x12 /v1/clusters/{cluster_id}/status\x12j\n" +
	"\x14ListClustersByTenant\x12\x1a.kubemanager.TenantRequest\x1a .kubemanager.ClusterListResponse\"\x14\x82\xd3\xe4\x93\x02\x0e\x12\f/v1/clusters\x12x\n" +
	"\x0eGetClusterLogs\x12\x1d.kubemanager.ClusterIDRequest\x1a\x1f.kubemanager.ClusterLogResponse\"&\x82\xd3\xe4\x93\x02 \x12\x1e/v1/clusters/{cluster_id}/logs\x12\x86\x01\n" +
	"\x10RestartComponent\x12$.kubemanager.RestartComponentRequest\x1a\x1e.kubemanager.OperationResponse\",\x82\xd3\xe4\x93\x02&:\x01*\"!/v1/clusters/{cluster_id}/restart\x12\x82\x01\n" +
	"\x13ExportClusterConfig\x12\x1d.kubemanager.ClusterIDRequest\x1a\".kubemanager.ClusterConfigResponse\"(\x82\xd3\xe4\x93\x02\"\x12 /v1/clusters/{cluster_id}/export\x12\x89\x01\n" +
	"\x12ApplyClusterConfig\x12&.kubemanager.ApplyClusterConfigRequest\x1a\x1e.kubemanager.OperationResponse\"+\x82\xd3\xe4\x93\x02%:\x01*\" /v1/clusters/{cluster_id}/config\x12\x8b\x01\n" +
	"\x14GetClusterOperations\x12\x1d.kubemanager.ClusterIDRequest\x1a&.kubemanager.ClusterOperationsResponse\",\x82\xd3\xe4\x93\x02&\x12$/v1/clusters/{cluster_id}/operations\x12}\n" +
	"\x10ListClusterUsers\x12\x1d.kubemanager.ClusterIDRequest\x1a!.kubemanager.ClusterUsersResponse\"'\x82\xd3\xe4\x93\x02!\x12\x1f/v1/clusters/{cluster_id}/users\x12\x80\x01\n" +
	"\x0eAddClusterUser\x12\".kubemanager.AddClusterUserRequest\x1a\x1e.kubemanager.OperationResponse\"*\x82\xd3\xe4\x93\x02$:\x01*\"\x1f/v1/clusters/{cluster_id}/users\x12\x82\x01\n" +
	"\x0eUpgradeCluster\x12\".kubemanager.UpgradeClusterRequest\x1a\x1e.kubemanager.OperationResponse\",\x82\xd3\xe4\x93\x02&:\x01*\"!/v1/clusters/{cluster_id}/upgrade\x12\x8a\x01\n" +
	"\rGetNodeHealth\x12\x1e.kubemanager.NodeHealthRequest\x1a\x1f.kubemanager.NodeHealthResponse\"8\x82\xd3\xe4\x93\x022\x120/v1/clusters/{cluster_id}/nodes/{node_id}/healthB6Z4github.com/thekrauss/nafyp-protos/gen/go/kubemanagerb\x06proto3"

var (
	file_kubemanager_proto_rawDescOnce sync.Once
	file_kubemanager_proto_rawDescData []byte
)

func file_kubemanager_proto_rawDescGZIP() []byte {
	file_kubemanager_proto_rawDescOnce.Do(func() {
		file_kubemanager_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_kubemanager_proto_rawDesc), len(file_kubemanager_proto_rawDesc)))
	})
	return file_kubemanager_proto_rawDescData
}

var file_kubemanager_proto_msgTypes = make([]protoimpl.MessageInfo, 28)
var file_kubemanager_proto_goTypes = []any{
	(*CreateClusterRequest)(nil),      // 0: kubemanager.CreateClusterRequest
	(*ClusterIDRequest)(nil),          // 1: kubemanager.ClusterIDRequest
	(*ScaleClusterRequest)(nil),       // 2: kubemanager.ScaleClusterRequest
	(*DeployAppRequest)(nil),          // 3: kubemanager.DeployAppRequest
	(*RestartComponentRequest)(nil),   // 4: kubemanager.RestartComponentRequest
	(*Cluster)(nil),                   // 5: kubemanager.Cluster
	(*ClusterStatusResponse)(nil),     // 6: kubemanager.ClusterStatusResponse
	(*ClusterListResponse)(nil),       // 7: kubemanager.ClusterListResponse
	(*ClusterLogResponse)(nil),        // 8: kubemanager.ClusterLogResponse
	(*TenantRequest)(nil),             // 9: kubemanager.TenantRequest
	(*OperationResponse)(nil),         // 10: kubemanager.OperationResponse
	(*ClusterConfigResponse)(nil),     // 11: kubemanager.ClusterConfigResponse
	(*ApplyClusterConfigRequest)(nil), // 12: kubemanager.ApplyClusterConfigRequest
	(*ClusterOperationsResponse)(nil), // 13: kubemanager.ClusterOperationsResponse
	(*ClusterOperation)(nil),          // 14: kubemanager.ClusterOperation
	(*AddClusterUserRequest)(nil),     // 15: kubemanager.AddClusterUserRequest
	(*ClusterUsersResponse)(nil),      // 16: kubemanager.ClusterUsersResponse
	(*ClusterUser)(nil),               // 17: kubemanager.ClusterUser
	(*UpgradeClusterRequest)(nil),     // 18: kubemanager.UpgradeClusterRequest
	(*NodeHealthRequest)(nil),         // 19: kubemanager.NodeHealthRequest
	(*NodeHealthResponse)(nil),        // 20: kubemanager.NodeHealthResponse
	nil,                               // 21: kubemanager.CreateClusterRequest.TagsEntry
	nil,                               // 22: kubemanager.DeployAppRequest.ValuesEntry
	nil,                               // 23: kubemanager.Cluster.TagsEntry
	nil,                               // 24: kubemanager.ClusterStatusResponse.ComponentsStatusEntry
	nil,                               // 25: kubemanager.ClusterConfigResponse.AppConfigsEntry
	nil,                               // 26: kubemanager.ApplyClusterConfigRequest.AppConfigsEntry
	nil,                               // 27: kubemanager.NodeHealthResponse.MetricsEntry
}
var file_kubemanager_proto_depIdxs = []int32{
	21, // 0: kubemanager.CreateClusterRequest.tags:type_name -> kubemanager.CreateClusterRequest.TagsEntry
	22, // 1: kubemanager.DeployAppRequest.values:type_name -> kubemanager.DeployAppRequest.ValuesEntry
	23, // 2: kubemanager.Cluster.tags:type_name -> kubemanager.Cluster.TagsEntry
	24, // 3: kubemanager.ClusterStatusResponse.components_status:type_name -> kubemanager.ClusterStatusResponse.ComponentsStatusEntry
	5,  // 4: kubemanager.ClusterListResponse.clusters:type_name -> kubemanager.Cluster
	25, // 5: kubemanager.ClusterConfigResponse.app_configs:type_name -> kubemanager.ClusterConfigResponse.AppConfigsEntry
	26, // 6: kubemanager.ApplyClusterConfigRequest.app_configs:type_name -> kubemanager.ApplyClusterConfigRequest.AppConfigsEntry
	14, // 7: kubemanager.ClusterOperationsResponse.operations:type_name -> kubemanager.ClusterOperation
	17, // 8: kubemanager.ClusterUsersResponse.users:type_name -> kubemanager.ClusterUser
	27, // 9: kubemanager.NodeHealthResponse.metrics:type_name -> kubemanager.NodeHealthResponse.MetricsEntry
	0,  // 10: kubemanager.KubeManagerService.CreateCluster:input_type -> kubemanager.CreateClusterRequest
	3,  // 11: kubemanager.KubeManagerService.DeployApp:input_type -> kubemanager.DeployAppRequest
	2,  // 12: kubemanager.KubeManagerService.ScaleCluster:input_type -> kubemanager.ScaleClusterRequest
	1,  // 13: kubemanager.KubeManagerService.DeleteCluster:input_type -> kubemanager.ClusterIDRequest
	1,  // 14: kubemanager.KubeManagerService.GetClusterStatus:input_type -> kubemanager.ClusterIDRequest
	9,  // 15: kubemanager.KubeManagerService.ListClustersByTenant:input_type -> kubemanager.TenantRequest
	1,  // 16: kubemanager.KubeManagerService.GetClusterLogs:input_type -> kubemanager.ClusterIDRequest
	4,  // 17: kubemanager.KubeManagerService.RestartComponent:input_type -> kubemanager.RestartComponentRequest
	1,  // 18: kubemanager.KubeManagerService.ExportClusterConfig:input_type -> kubemanager.ClusterIDRequest
	12, // 19: kubemanager.KubeManagerService.ApplyClusterConfig:input_type -> kubemanager.ApplyClusterConfigRequest
	1,  // 20: kubemanager.KubeManagerService.GetClusterOperations:input_type -> kubemanager.ClusterIDRequest
	1,  // 21: kubemanager.KubeManagerService.ListClusterUsers:input_type -> kubemanager.ClusterIDRequest
	15, // 22: kubemanager.KubeManagerService.AddClusterUser:input_type -> kubemanager.AddClusterUserRequest
	18, // 23: kubemanager.KubeManagerService.UpgradeCluster:input_type -> kubemanager.UpgradeClusterRequest
	19, // 24: kubemanager.KubeManagerService.GetNodeHealth:input_type -> kubemanager.NodeHealthRequest
	10, // 25: kubemanager.KubeManagerService.CreateCluster:output_type -> kubemanager.OperationResponse
	10, // 26: kubemanager.KubeManagerService.DeployApp:output_type -> kubemanager.OperationResponse
	10, // 27: kubemanager.KubeManagerService.ScaleCluster:output_type -> kubemanager.OperationResponse
	10, // 28: kubemanager.KubeManagerService.DeleteCluster:output_type -> kubemanager.OperationResponse
	6,  // 29: kubemanager.KubeManagerService.GetClusterStatus:output_type -> kubemanager.ClusterStatusResponse
	7,  // 30: kubemanager.KubeManagerService.ListClustersByTenant:output_type -> kubemanager.ClusterListResponse
	8,  // 31: kubemanager.KubeManagerService.GetClusterLogs:output_type -> kubemanager.ClusterLogResponse
	10, // 32: kubemanager.KubeManagerService.RestartComponent:output_type -> kubemanager.OperationResponse
	11, // 33: kubemanager.KubeManagerService.ExportClusterConfig:output_type -> kubemanager.ClusterConfigResponse
	10, // 34: kubemanager.KubeManagerService.ApplyClusterConfig:output_type -> kubemanager.OperationResponse
	13, // 35: kubemanager.KubeManagerService.GetClusterOperations:output_type -> kubemanager.ClusterOperationsResponse
	16, // 36: kubemanager.KubeManagerService.ListClusterUsers:output_type -> kubemanager.ClusterUsersResponse
	10, // 37: kubemanager.KubeManagerService.AddClusterUser:output_type -> kubemanager.OperationResponse
	10, // 38: kubemanager.KubeManagerService.UpgradeCluster:output_type -> kubemanager.OperationResponse
	20, // 39: kubemanager.KubeManagerService.GetNodeHealth:output_type -> kubemanager.NodeHealthResponse
	25, // [25:40] is the sub-list for method output_type
	10, // [10:25] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_kubemanager_proto_init() }
func file_kubemanager_proto_init() {
	if File_kubemanager_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_kubemanager_proto_rawDesc), len(file_kubemanager_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   28,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_kubemanager_proto_goTypes,
		DependencyIndexes: file_kubemanager_proto_depIdxs,
		MessageInfos:      file_kubemanager_proto_msgTypes,
	}.Build()
	File_kubemanager_proto = out.File
	file_kubemanager_proto_goTypes = nil
	file_kubemanager_proto_depIdxs = nil
}
