syntax = "proto3";

package auth;

option go_package = "github.com/thekrauss/nafyp-protos/gen/go/auth";

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";
import "google/api/annotations.proto";


service AuthService {

  // Authentification : Permet à un utilisateur de se connecter avec ses identifiants
  rpc Login (LoginRequest) returns (LoginResponse) {
    option (google.api.http) = {
      post: "/v1/auth/login"
      body: "*"
    };
  }

  // Déconnexion : Invalide le token de session d'un utilisateur
  rpc Logout(LogoutRequest) returns (LogoutResponse) {
    option (google.api.http) = {
      post: "/v1/auth/logout"
      body: "*"
    };
  }

  // ➤ Création d'un administrateur Syk
  rpc CreateAdmin(CreateAdminRequest) returns (CreateAdminResponse) {
    option (google.api.http) = {
      post: "/v1/admins"
      body: "*"
    };
  }

  // Mise à jour des informations utilisateur
  rpc UpdateUser(UpdateUserRequest) returns (UpdateUserResponse) {
    option (google.api.http) = {
      put: "/v1/auth/users/{utilisateur_id}"
      body: "*"
    };
  }

  // Vérification de l'existence d'un utilisateur
  rpc CheckUserExists(CheckUserExistsRequest) returns (CheckUserExistsResponse) {
    option (google.api.http) = {
      get: "/v1/auth/users/{utilisateur_id}/exists"
    };
  }

  // Suppression d'un utilisateur par son ID
  rpc DeleteUser(DeleteUserRequest) returns (DeleteUserResponse) {
    option (google.api.http) = {
      delete: "/v1/auth/users/{utilisateur_id}"
    };
  }

  // Validation d'un token JWT pour vérifier son authenticité
  rpc ValidateToken (TokenRequest) returns (TokenResponse) {
    option (google.api.http) = {
      post: "/v1/auth/validate-token"
      body: "*"
    };
  }

  // Rafraîchissement du token JWT lorsqu'il expire
  rpc RefreshToken (RefreshTokenRequest) returns (RefreshTokenResponse) {
    option (google.api.http) = {
      post: "/v1/auth/refresh-token"
      body: "*"
    };
  }

  // Vérification d'un OTP (One-Time Password) pour la double authentification
  rpc VerifyOTP (VerifyOTPRequest) returns (VerifyOTPResponse) {
    option (google.api.http) = {
      post: "/v1/auth/verify-otp"
      body: "*"
    };
  }

  // Notification d'une nouvelle connexion sur un appareil inconnu
  rpc NotifyNewDevice(NotifyNewDeviceRequest) returns (NotifyNewDeviceResponse){
    option (google.api.http) = {
      post: "/v1/auth/notify-device"
      body: "*"
    };
  }

  // Demande de réinitialisation de mot de passe (l'utilisateur recevra un email)
  rpc RequestPasswordReset (PasswordResetRequest) returns (PasswordResetResponse) {
    option (google.api.http) = {
      post: "/v1/auth/request-password-reset"
      body: "*"
    };
  }

  // Activation de l'authentification multi-facteurs (MFA)
  rpc EnableMFA (EnableMFARequest) returns (EnableMFAResponse) {
    option (google.api.http) = {
      post: "/v1/auth/enable-mfa"
      body: "*"
    };
  }

  // Désactivation de l'authentification multi-facteurs (MFA)
  rpc DisableMFA (DisableMFARequest) returns (DisableMFAResponse) {
    option (google.api.http) = {
      post: "/v1/auth/disable-mfa"
      body: "*"
    };
  }

  // Modification du mot de passe d'un utilisateur (changement volontaire)
  rpc UpdateUserPassword(UpdateUserPasswordRequest) returns (UpdateUserPasswordResponse) {
    option (google.api.http) = {
      put: "/api/users/password"
      body: "*"
    };
  }

  rpc GetUserProfile(GetUserProfileRequest) returns (GetUserProfileResponse) {
    option (google.api.http) = {
      get: "/v1/auth/users/{utilisateur_id}/profile"
    };
  }

  // Demande de réinitialisation de mot de passe en cas d'oubli
  rpc ForgotPassword(ForgotPasswordRequest) returns (ForgotPasswordResponse) {
    option (google.api.http) = {
      post: "/api/users/forgot-password"
      body: "*"
    };
  }

   // Définir les permissions d'un administrateur 
   rpc SetCdnPermissions(SetCdnPermissionsRequest) returns (SetCdnPermissionsResponse) {
    option (google.api.http) = {
      post: "/v1/admin/cdn-admins/{utilisateur_id}/permissions"
      body: "*"
    };
  }

  // Lister tous les administrateurs
  rpc ListAllAdmins(ListAllAdminsRequest) returns (ListAllAdminsResponse) {
        option (google.api.http) = {
      get: "/v1/admins"
    };
  }

  rpc GetAdminByID(GetAdminByIDRequest) returns (GetAdminInfoResponse) {
    option (google.api.http) = {
      get: "/v1/admins/{utilisateur_id}"
    };
  }

  rpc CreateTenant(CreateTenantRequest) returns (CreateTenantResponse) {
    option (google.api.http) = {
      post: "/v1/admin/tenants"
      body: "*"
    };
  }

    // ➤ Récupération d'une école par ID
  rpc GetTenantByID(GetTenantRequest) returns (Tenant) {
    option (google.api.http) = {
      get: "/v1/admin/tenants/{id_tenant}"
    };
  }

    // ➤ Lister toutes les écoles
    rpc ListTenants(ListTenantRequest) returns (ListTenantResponse) {
      option (google.api.http) = {
        get: "/v1/admin/schools"
      };
    } 
  
    rpc DeleteTenant(DeleteTenantRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/v1/admin/tenants/{id_tenant}"
      };
    }
  
  // ➤ Vérification d'une permission pour un utilisateur
  rpc HasPermission (HasPermissionRequest) returns (HasPermissionResponse) {
    option (google.api.http) = {
      get: "/v1/auth/users/{user_id}/has-permission"
    };
  }

  rpc CreateCdnAdmin(CreateCdnAdminRequest) returns (CreateCdnAdminResponse) {
    option (google.api.http) = {
      post: "/v1/admin/cdn"
      body: "*"
    };
  }
  
  rpc RegisterIndividuel(RegisterIndividuelRequest) returns (RegisterIndividuelResponse);

}


enum Role {
  admin = 0;
  viewer = 1;
  superadmin = 2;
}

message LoginRequest {
  string identifier = 1;
  string password = 2;
  string ip_address = 3;
  string user_agent = 4;
  bool requires_otp = 5;
}

message LoginResponse {
  string token = 1;
  string refresh_token = 2;
  string message = 3;
  Role role = 4;
  string userId = 5;
  bool requires_otp = 6;
}
message LogoutRequest {
  string refresh_token = 1;
}

message LogoutResponse {
  string message = 1;
}

message RegisterRequest {
  string nom = 1;
  string prenom = 2;
  string email = 3;
  string genre = 4;
  string telephone = 5;
  string mot_de_passe = 6;
  string role = 7;
  string photo_profil = 10;
}

message RegisterResponse {
  string userId = 1;
  string message = 2;
  bool success = 3;
  string login_id = 4;
}

message UpdateUserRequest {
	string utilisateur_id = 1;
	string nom = 2;
	string prenom = 3;
	string email = 4;
	string telephone = 5;
	Role   role = 6;
	string mot_de_passe = 8; 
  string photo_profil = 9; 
}

message CheckUserExistsRequest {
  string utilisateur_id = 1;
}

message CheckUserExistsResponse {
  bool exists = 1;
}

message UpdateUserResponse {
	string message = 1;
}

message DeleteUserRequest {
  string utilisateur_id = 1;
}

message DeleteUserResponse {
  bool success = 1;
  string message = 2;
}

message TokenRequest {
  string token = 1;
}

message TokenResponse {
  bool valid = 1;
}

message RefreshTokenRequest {
  string refresh_token = 1;
}

message RefreshTokenResponse {
  string token = 1;
  string refresh_token = 2;
}

message VerifyOTPRequest {
  string email = 1;
  string otp = 2;
}

message VerifyOTPResponse {
  string message = 1;
}

message NotifyNewDeviceRequest {
  string telephone = 1;
  string device_info = 2;
}

message NotifyNewDeviceResponse {
  string message = 1;
}


message PasswordResetRequest {
  string email = 1;
}

message PasswordResetResponse {
  string otp = 1;
  string message = 2;
}

message EnableMFARequest {
  string email = 1;
}

message EnableMFAResponse {
  string message = 1;
}

message DisableMFARequest {
  string email = 1;
}

message DisableMFAResponse {
  string message = 1;
}

message UpdateUserPasswordRequest {
  string utilisateur_id = 1;
  string new_password = 2;
}

message UpdateUserPasswordResponse {
  string message = 1;
}

message ForgotPasswordRequest {
  string email = 1;
}

message ForgotPasswordResponse {
  string message = 1;
}

message GetUserProfileRequest {
  string utilisateur_id = 1;
}

message GetUserProfileResponse {
  string utilisateur_id = 1;
  string nom = 2;
  string prenom = 3;
  string email = 4;
  string photo_profil = 5;
}

message SetCdnPermissionsRequest {
	string utilisateur_id = 1;
	repeated string permissions = 2;
}

message SetCdnPermissionsResponse {
	string message = 1;
}


message CreateAdminRequest {
  string id_tenant = 1;        
  string nom = 2;
  string prenom = 3;
  string email = 4;
  string genre = 5;
  string telephone = 6;
  string role = 7;
  repeated string permissions = 8;
}


message CreateAdminResponse {
  string message = 1;             
}

message GetAdminInfoResponse {
	string utilisateur_id = 1;
	string nom = 2;
	string prenom = 3;
	string email = 4;
	string telephone = 5;
	string role = 6;
}

message ListAllAdminsRequest {
  int32 limit = 1;   
  int32 offset = 2;  
  string query = 3;  
  string tenant_id = 4;
  bool is_active = 5;
}

message ListAllAdminsResponse {
  repeated GetAdminInfoResponse admins = 1;
  int32 total = 2; 
}

message GetAdminByIDRequest {
  string utilisateur_id = 1;
}

message Tenant {
  string id_tenant = 1;
  string nom = 2;
  string adresse = 3;
  string ville = 4;
  string code_postal = 5;
  string contact_telephone = 6;
  string contact_email = 7;
  string directeur_nom = 8;
  string directeur_contact = 9;
  string type_etablissement = 10;
  string parametres_specifiques = 11;
  google.protobuf.Timestamp date_creation = 12;
  string validation_status = 14;
  string logo_url = 15;
  string id_organisation = 16; 
}

message CreateTenantRequest {
  string nom = 1;
  string adresse = 2;
  string ville = 3;
  string code_postal = 4;
  string contact_telephone = 5;
  string contact_email = 6;
  string directeur_nom = 7;
  string directeur_contact = 8;
  string type_etablissement = 9;
  string parametres_specifiques = 10;
  string logo_url = 11;
  string id_organisation = 12; 
}

message CreateTenantResponse {
  string message = 1;
  string id_tenant = 2;
}

message DeleteTenantRequest {
  string id_tenant = 1;
  string utilisateur_id = 2;
  string raison = 3;
}

message UpdateTenantRequest {
    string id_tenant = 1;
    string nom = 2;
    string adresse = 3;
    string ville = 4;
    string code_postal = 5;
    string contact_telephone = 6;
    string contact_email = 7;
    string directeur_nom = 8;
    string directeur_contact = 9;
    string type_etablissement = 10;
    repeated string modules_disponibles = 11;
    string parametres_specifiques = 12;
}

message UpdateTenantResponse {
  string message = 1;
}

message GetTenantRequest {
  string id_tenant = 1;
}

message ListTenantRequest {
	int32 page = 1;
	int32 limit = 2;
	string query = 3;                 
	repeated string types = 4;        
	string validation_status = 5;      // Filtre : statut de validation (ex: "En attente", "Validé")
	string order_by = 6;               // Tri (ex: "nom", "ville", "date_creation", "validation_status")
	bool desc = 7;                     // Tri descendant si `true`
	string min_creation_date = 8;      // Filtre : récupérer les écoles après cette date (YYYY-MM-DD)
}

message ListTenantResponse {
  repeated Tenant tenant = 1;
  int32 total = 2;
}

message HasPermissionRequest {
  string user_id = 1;
  string permission = 2;
}

message HasPermissionResponse {
  bool allowed = 1;
}

message CreateCdnAdminRequest {
  string utilisateur_id = 1;
  string nom = 2;
  string prenom = 3;
  string email = 4;
  string genre = 5;
  string telephone = 6;
  string role = 7;
  string id_organisation = 8;
  repeated string permissions = 9;
}

message CreateCdnAdminResponse {
  string message = 1;
}

message RegisterIndividuelRequest {
  string nom = 1;
  string prenom = 2;
  string email = 3;
  string telephone = 4;
  string mot_de_passe = 5;
  string genre = 6;
  string role = 7;
  repeated string permissions = 8;
}

message RegisterIndividuelResponse {
  string user_id = 1;
  string message = 2;
}
